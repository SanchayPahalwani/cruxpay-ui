"use strict";

$(document).ready(function () {
  var currentInput;
  var appCtrl = new function () {
    var _this = this;

    this.availableStates = ['registration', 'customisation'];
    this.registration = {
      el: $('#registration'),
      hide: function hide() {
        this.el.addClass('cs-hide');
      },
      show: function show() {
        this.el.removeClass('cs-hide');
      }
    };
    this.customisation = {
      el: $('#customisation'),
      hide: function hide() {
        this.el.addClass('cs-hide');
      },
      show: function show() {
        this.el.removeClass('cs-hide');
      }
    };

    this.renderState = function (state) {
      if (_this.availableStates.includes(state)) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _this.availableStates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var thisState = _step.value;

            if (thisState === state) {
              _this[thisState].show();
            } else {
              _this[thisState].hide();
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    };

    this.renderApp = function (currentInput) {
      if (currentInput && currentInput.payIDName) {
        _this.renderState('customisation');

        currency.init({
          payIDName: currentInput.payIDName,
          availableCurrencies: currentInput.availableCurrencies,
          publicAddressCurrencies: currentInput.publicAddressCurrencies,
          allCurrencies: currentInput.assetList && currentInput.assetList.length > 0 ? curlistAdapter(currentInput.assetList) : []
        });
      } else {
        _this.renderState('registration');
      }
    };
  }();
  var loader = {
    show: function show(el, handlerFn) {
      el.attr('disabled', 'true');
      el.off('click', handlerFn);
    },
    hide: function hide(el, handlerFn) {
      el.removeAttr('disabled', 'false');
      el.on('click', handlerFn);
    }
  };
  /*******************************
          Registration
  ********************************/

  var textFields = document.querySelectorAll(".mdc-text-field");
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = textFields[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var textField = _step2.value;
      mdc.textField.MDCTextField.attachTo(textField);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  var cruxpayId = {
    input: $('#cruxpayId'),
    inputParent: $('.cruxpay-id__container'),
    helperText: $('#cruxpay-id__helper-text'),
    parentContainer: $('.cruxpay-id__container').parent(),
    displayError: function displayError(message) {
      this.helperText.removeClass('helper-text--success');
      this.inputParent.addClass('mdc-text-field--invalid');
      this.parentContainer.addClass('has-error');
      this.helperText.html(message);
    },
    displaySuccess: function displaySuccess(message) {
      cruxpayId.inputParent.removeClass('mdc-text-field--invalid');
      cruxpayId.helperText.addClass('helper-text--success');
      cruxpayId.parentContainer.removeClass('has-error');
      cruxpayId.helperText.html(message);
    },
    displayHelpText: function displayHelpText(message) {
      cruxpayId.helperText.removeClass('helper-text--success');
      cruxpayId.inputParent.removeClass('mdc-text-field--invalid');
      cruxpayId.parentContainer.removeClass('has-error');
      cruxpayId.helperText.html(message);
    },
    getId: function getId() {
      return this.input.val();
    },
    isValid: false
  };
  var timer = null;
  cruxpayId.input.on('keyup', function (e) {
    cruxpayId.displayHelpText("Checking availability");
    cruxpayId.isValid = false;
    clearTimeout(timer);
    timer = setTimeout(function () {
      if (e.target.value && e.target.value.length > 0) {
        isUserIdAvailable(e.target.value);
      }
    }, 500);
  });

  function isUserIdAvailable(id) {
    $.ajax({
      type: "GET",
      url: "https://167.71.234.131:3000/status/".concat(id),
      success: function success(response) {
        cruxpayId.isValid = false;
        cruxpayId.displayError("".concat(id, " is unavailable"));
      },
      error: function error(xhr, ajaxOptions, thrownError) {
        if (xhr.status == 404) {
          cruxpayId.isValid = true;
          cruxpayId.displaySuccess("".concat(id, " is available"));
        }
      }
    });
  }

  var password = {
    input: $('#cruxpayPassword'),
    helperText: $('#cruxpay-password__helper-text'),
    inputParent: $('.cruxpay-password__container'),
    parentContainer: $('.cruxpay-password__container').parent(),
    isValid: false,
    validation: {
      isValid: function isValid(p) {
        var re = /^[a-zA-Z0-9$@!#^&%_-]{8,50}$/;
        return re.test(String(p).toLowerCase());
      },
      containsId: function containsId(p) {
        return p === cruxpayId.input.val();
      },
      hasDigit: function hasDigit(p) {
        var re = /[0-9]/;
        return re.test(p);
      },
      hasLowerCase: function hasLowerCase(p) {
        var re = /[a-z]/;
        return re.test(p);
      },
      hasUpperCase: function hasUpperCase(p) {
        var re = /[A-Z]/;
        return re.test(p);
      },
      hasSpecialCharacter: function hasSpecialCharacter(p) {
        var re = /(?=.*[!#$%&?@"])/;
        return re.test(p);
      }
    },
    displayError: function displayError(message) {
      this.helperText.removeClass('helper-text--success');
      this.inputParent.addClass('mdc-text-field--invalid');
      this.parentContainer.addClass('has-error');
      this.helperText.html(message);
    },
    clearAllError: function clearAllError() {
      this.helperText.addClass('helper-text--success');
      this.inputParent.removeClass('mdc-text-field--invalid');
      this.parentContainer.removeClass('has-error');
      this.helperText.html('');
    },
    toggleValidationBlock: function toggleValidationBlock(state) {
      if (state) {
        $('.validation-rules').css('opacity', 1);
      } else {
        $('.validation-rules').css('opacity', 0);
      }
    },
    setValidation: function setValidation(name, state) {
      var validationEl = $("#validation-".concat(name));
      this.isValid = state;

      if (validationEl && validationEl.length > 0) {
        if (state) {
          validationEl.removeClass('rule-isInvalid');
          validationEl.addClass('rule-isValid');
        } else {
          validationEl.addClass('rule-isInvalid');
          validationEl.removeClass('rule-isValid');
        }
      }
    },
    getPassword: function getPassword() {
      return this.input.val();
    },
    runValidations: function runValidations(passphrase) {
      if (this.validation.isValid(passphrase)) {
        this.setValidation('charLen', true);
      } else {
        this.setValidation('charLen', false);
        this.displayError('Minimum length required is 8. Only following special characters !,#,$,%,&,?,@ are allowed');
      }

      if (!this.validation.containsId(passphrase)) {
        this.setValidation('sameAsId', true);
      } else {
        this.setValidation('sameAsId', false);
        this.displayError('Password must be different from CruxPay ID');
      }

      if (this.validation.hasDigit(passphrase)) {
        this.setValidation('digit', true);
      } else {
        this.setValidation('digit', false);
        this.displayError('Password must be have atleast one number');
      }

      if (this.validation.hasLowerCase(passphrase)) {
        this.setValidation('lowercase', true);
      } else {
        this.setValidation('lowercase', false);
        this.displayError('Password must be have atleast one lowercase letter');
      }

      if (this.validation.hasUpperCase(passphrase)) {
        this.setValidation('uppercase', true);
      } else {
        this.setValidation('uppercase', false);
        this.displayError('Password must be have atleast one uppercase letter');
      }

      if (this.validation.hasSpecialCharacter(passphrase)) {
        this.setValidation('specialCharater', true); // this.toggleValidationBlock(false);

        this.clearAllError();
      } else {
        this.setValidation('specialCharater', false);
        this.displayError('Password must be have atleast one of following special characters !,#,$,%,&,?,@ are allowed');
      }
    }
  };
  password.input.on('keyup', function (e) {
    password.toggleValidationBlock(true);
    password.runValidations(password.getPassword());
  });
  $('#createId').on('click', createNewID);

  function createNewID() {
    if (cruxpayId.isValid && password.isValid) {
      loader.show($('#createId'), createNewID);
      var inputPayIDName = cruxpayId.getId();
      var inputPayIDPass = password.getPassword();
      appCtrl.data = {
        newPayIDName: inputPayIDName,
        newPayIDPass: inputPayIDPass
      };
      currentInput.payIDName = inputPayIDName;
      appCtrl.renderApp(currentInput);
    } else {
      if (!password.isValid) {
        password.runValidations(password.getPassword());
      }

      if (!cruxpayId.isValid) {
        cruxpayId.displayError(cruxpayId.getId() && cruxpayId.getId().length > 0 ? "".concat(cruxpayId.getId(), " is unavailable") : 'cruxpay id is needed');
      }
    }
  }
  /*******************************
          Customisation
  ********************************/


  var currency = {
    container: $('#currencyContainer'),
    selectedCurCintainer: $('#selectedCurContainer'),
    search: $('#cruxSearchCur'),
    selectedRadio: 'custom',
    radioContainer: $('.customisation__radio-select'),
    init: function init(_ref) {
      var _this2 = this;

      var payIDName = _ref.payIDName,
          availableCurrencies = _ref.availableCurrencies,
          publicAddressCurrencies = _ref.publicAddressCurrencies,
          allCurrencies = _ref.allCurrencies;
      $('#cruxpayIdName').html(payIDName);
      var currenciesToRender = [];
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = allCurrencies[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _currency = _step3.value;

          if (availableCurrencies.includes(_currency.symbol.toUpperCase())) {
            if (publicAddressCurrencies.includes(_currency.symbol.toUpperCase())) {
              _currency.selected = true;
            } else {
              _currency.selected = false;
            }

            currenciesToRender.push(_currency);
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      this.list = currenciesToRender;
      this.renderRadios();
      this.search.on('keyup', function (event) {
        var filteredList = _this2.filter(_this2.list, event.target.value);

        _this2.renderCurList(filteredList);
      });
      this.renderCurList(this.list);
      this.renderSelectedCurPills(this.list);
    },
    availableRadios: [{
      id: 'radio-selectCustom',
      value: 'custom',
      name: 'Custom'
    }, {
      id: 'radio-selectAll',
      value: 'all',
      name: 'All'
    }, {
      id: 'radio-selectPopular',
      value: 'popular',
      name: 'Popular'
    }, {
      id: 'radio-selectNone',
      value: 'none',
      name: 'None'
    }],
    renderCurList: function renderCurList(curlist) {
      var template = '';
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = curlist[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var cur = _step4.value;
          template += this.renderCur(cur);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      $(this.container).html(template);
      this.bindCheckboxEvents();
    },
    renderCur: function renderCur(_ref2) {
      var name = _ref2.name,
          symbol = _ref2.symbol,
          img = _ref2.img,
          selected = _ref2.selected;
      return "\n            <div class=\"customisation__currency ".concat(selected ? 'customisation__currency--isSelected' : '', " \">\n                <div class=\"mdc-form-field\">\n                    <div class=\"mdc-checkbox\">\n                        <input\n                            data-symbol=\"").concat(symbol, "\"\n                            type=\"checkbox\"\n                            class=\"mdc-checkbox__native-control\"\n                            id=\"checkbox-").concat(symbol, "\"\n                            ").concat(selected ? 'checked' : '', "\n                        />\n                        <div class=\"mdc-checkbox__background\">\n                            <svg class=\"mdc-checkbox__checkmark\" viewBox=\"0 0 24 24\">\n                            <path\n                                class=\"mdc-checkbox__checkmark-path\"\n                                fill=\"none\"\n                                d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"\n                            />\n                            </svg>\n                            <div class=\"mdc-checkbox__mixedmark\"></div>\n                        </div>\n                    </div>\n                    <label for=\"checkbox-").concat(symbol, "\" class=\"customisation__checkbox-label\">\n                        <img class=\"customisation__currency-logo\" src=\"").concat(img, "\" />\n                        <div class=\"customisation__currency-name\">").concat(name, "</div>\n                    </label>\n                </div>\n                <div class=\"customisation__currency-symbol\">").concat(symbol.toUpperCase(), "</div>\n            </div>\n            ");
    },
    renderSelectedCurPills: function renderSelectedCurPills(curlist) {
      var template = '';
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = curlist[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var cur = _step5.value;
          if (cur.selected) template += this.renderSelectedPill(cur);
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      $(this.selectedCurCintainer).html(template);
      this.bindPillEvents();
    },
    renderSelectedPill: function renderSelectedPill(_ref3) {
      var symbol = _ref3.symbol;
      return "\n                <div class=\"selected-currency__pill\">\n                    <strong>".concat(symbol.toUpperCase(), "</strong>\n                    <i class=\"material-icons\" data-symbol=\"").concat(symbol, "\">clear</i>\n                </div>\n            ");
    },
    renderRadios: function renderRadios() {
      var template = '';
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = this.availableRadios[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var radio = _step6.value;
          template += this.renderRadioEl(radio);
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      $(this.radioContainer).html(template);
      this.bindRadioEvents();
    },
    renderRadioEl: function renderRadioEl(_ref4) {
      var id = _ref4.id,
          value = _ref4.value,
          name = _ref4.name;
      return "\n                <div class=\"mdc-form-field\">\n                    <div class=\"mdc-radio mdc-custom-radio\">\n                        <input class=\"mdc-radio__native-control\" type=\"radio\" id=\"".concat(id, "\" name=\"radios\" value=\"").concat(value, "\">\n                        <div class=\"mdc-radio__background\">\n                            <div class=\"mdc-radio__outer-circle\"></div>\n                            <div class=\"mdc-radio__inner-circle\"></div>\n                        </div>\n                    </div>\n                    <label for=\"").concat(id, "\">").concat(name, "</label>\n                </div>\n            ");
    },
    filter: function filter(list, query) {
      var searchString = query || '';

      try {
        var searchRegex = new RegExp(searchString, 'ig');
        return list.filter(function (coin) {
          return coin.name.match(searchRegex) || coin.symbol.match(searchRegex);
        });
      } catch (e) {
        return [];
      }
    },
    bindCheckboxEvents: function bindCheckboxEvents() {
      var _this3 = this;

      $('.mdc-checkbox__native-control').on('click', function (event) {
        var el = $(event.target);

        for (var index in _this3.list) {
          var coin = _this3.list[index];

          if (coin.symbol === el.data('symbol')) {
            _this3.list[index].selected = el.is(':checked');
          }
        }

        $('#radio-selectCustom').prop('checked', 'true');

        _this3.renderSelectedCurPills(_this3.list);
      });
    },
    bindPillEvents: function bindPillEvents() {
      var _this4 = this;

      $('.selected-currency__pill').on('click', function (event) {
        var el = $(event.target);

        for (var index in _this4.list) {
          var coin = _this4.list[index];

          if (coin.symbol === el.data('symbol')) {
            _this4.list[index].selected = false;
          }
        }

        $('#radio-selectCustom').prop('checked', 'true');

        _this4.renderCurList(_this4.list);

        _this4.renderSelectedCurPills(_this4.list);
      });
    },
    bindRadioEvents: function bindRadioEvents() {
      var _this5 = this;

      $('.mdc-radio__native-control').on('click', function (event) {
        switch (event.target.value) {
          case 'custom':
            _this5.selectedRadio = 'custom';
            break;

          case 'popular':
            var popularCoins = ['btc', 'eth', 'xrp', 'bch', 'ltc'];

            for (var index in _this5.list) {
              var coin = _this5.list[index];

              if (popularCoins.includes(coin.symbol)) {
                _this5.list[index].selected = true;
              } else {
                _this5.list[index].selected = false;
              }
            }

            _this5.renderCurList(_this5.list);

            _this5.renderSelectedCurPills(_this5.list);

            _this5.selectedRadio = 'popular';
            break;

          case 'all':
            for (var _index in _this5.list) {
              _this5.list[_index].selected = true;
            }

            _this5.renderCurList(_this5.list);

            _this5.renderSelectedCurPills(_this5.list);

            _this5.selectedRadio = 'all';
            break;

          case 'none':
            for (var _index2 in _this5.list) {
              _this5.list[_index2].selected = false;
            }

            _this5.renderCurList(_this5.list);

            _this5.renderSelectedCurPills(_this5.list);

            _this5.selectedRadio = 'none';
            break;
        }
      });
      var radios = $('.mdc-radio__native-control');
      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = radios[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var radio = _step7.value;

          if (this.selectedRadio === radio.value) {
            radio.setAttribute('checked', 'true');
          }
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
            _iterator7.return();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }
    }
  };

  function handleCustomisation() {
    loader.show($('#updateCustomization'), handleCustomisation);
    var checkedCurrencies = [];
    var _iteratorNormalCompletion8 = true;
    var _didIteratorError8 = false;
    var _iteratorError8 = undefined;

    try {
      for (var _iterator8 = currency.list[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
        var cur = _step8.value;

        if (cur.selected) {
          checkedCurrencies.push(cur.symbol.toUpperCase());
        }
      }
    } catch (err) {
      _didIteratorError8 = true;
      _iteratorError8 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
          _iterator8.return();
        }
      } finally {
        if (_didIteratorError8) {
          throw _iteratorError8;
        }
      }
    }

    if (appCtrl.isExistingAccount) {
      var existingMessage = {
        type: 'editExisting',
        data: {
          checkedCurrencies: checkedCurrencies
        }
      };
      existingMessage = JSON.stringify(existingMessage);
      existingMessage = OpenPay.Encryption.eciesEncryptString(existingMessage, window.encryptionKey);
      window.parent.postMessage(existingMessage, '*');
    } else {
      var registerMessage = {
        type: 'createNew',
        data: {
          newPayIDName: appCtrl.data.newPayIDName,
          newPayIDPass: appCtrl.data.newPayIDPass,
          checkedCurrencies: checkedCurrencies
        }
      };
      registerMessage = OpenPay.Encryption.eciesEncryptString(JSON.stringify(registerMessage), window.encryptionKey);
      window.parent.postMessage(registerMessage, '*');
    }
  }

  $('#updateCustomization').on('click', handleCustomisation);

  function handleCloseSetup() {
    var closeIframeMessage = {
      type: 'closeIframe'
    };
    closeIframeMessage = JSON.stringify(closeIframeMessage);
    closeIframeMessage = OpenPay.Encryption.eciesEncryptString(JSON.stringify(closeIframeMessage), window.encryptionKey);
    window.parent.postMessage(closeIframeMessage, '*');
  }

  $('#closeSetup').on('click', handleCloseSetup);

  function curlistAdapter(list) {
    return list.map(function (e) {
      return {
        name: e.name,
        symbol: e.symbol,
        img: e.image_sm_url
      };
    });
  }
  /**** FIXME ****/

  /*let allCurrencies = [{ "asset_id": "8dd939ef-b9d2-46f0-8796-4bd8dbaeef1b", "name": "Litecoin", "symbol": "ltc", "image_sm_url": "https://s3.ap-south-1.amazonaws.com/crypto-exchange/coins-sm/litecoin.png" }, { "asset_id": "508b8f73-4b06-453e-8151-78cb8cfc3bc9", "name": "Ethereum", "symbol": "eth", "image_sm_url": "https://s3.ap-south-1.amazonaws.com/crypto-exchange/coins-sm/ether.png" }, { "asset_id": "9a267cc3-0e72-4db5-930c-c60a74d64c55", "name": "Basic Attention Token", "symbol": "bat", "image_sm_url": "https://s3.ap-south-1.amazonaws.com/crypto-exchange/coins-sm/bat.png" }, { "asset_id": "490f7648-7fc1-4f0d-aa23-e08185daf8a5", "name": "DigiByte", "symbol": "dgb", "image_sm_url": "https://s3.ap-south-1.amazonaws.com/crypto-exchange/coins-sm/digibyte.png" }, { "asset_id": "77a880a0-3443-4eef-8500-bdc8dcdd3370", "name": "Dai", "symbol": "dai", "image_sm_url": "https://s3.ap-south-1.amazonaws.com/crypto-exchange/coins-sm/dai.png" }, { "asset_id": "902d4bde-f877-486e-813e-135920cc7f33", "name": "0x", "symbol": "zrx", "image_sm_url": "https://s3.ap-south-1.amazonaws.com/crypto-exchange/coins/0x.png" }, { "asset_id": "0999c959-f691-4553-b461-b88ea5032e0c", "name": "Monaco", "symbol": "mco", "image_sm_url": "https://s3.ap-south-1.amazonaws.com/crypto-exchange/coins-sm/monaco.png" }, { "asset_id": "fecfeb26-e612-4df4-aed7-bd4ad0194936", "name": "Civic", "symbol": "cvc", "image_sm_url": "https://s3.ap-south-1.amazonaws.com/crypto-exchange/coins-sm/civic.png" }, { "asset_id": "20d57d7d-3cc1-428a-ae90-09fb9c5168f5", "name": "Decred", "symbol": "dcr", "image_sm_url": "https://s3.ap-south-1.amazonaws.com/crypto-exchange/coins-sm/decred.png" }, { "asset_id": "9d796569-0faf-4e4a-b581-676fab3433d9", "name": "DigixDAO", "symbol": "dgd", "image_sm_url": "https://s3.ap-south-1.amazonaws.com/crypto-exchange/coins-sm/digixdao.png" }, { "asset_id": "d133dd13-a791-4c2b-9c14-b4c8532f6b91", "name": "district0x", "symbol": "dnt", "image_sm_url": "https://s3.ap-south-1.amazonaws.com/crypto-exchange/coins-sm/district0x.png" }, { "asset_id": "9dbdc727-de68-4f2a-8956-04a38ed71ca5", "name": "Tron", "symbol": "trx", "image_sm_url": "" }, { "asset_id": "1d6e1a99-1e77-41e1-9ebb-0e216faa166a", "name": "Bitcoin", "symbol": "btc", "image_sm_url": "" }, { "asset_id": "b33adc7a-beb9-421f-95d6-d495dc549f79", "name": "Lisk", "symbol": "lsk", "image_sm_url": "https://s3.ap-south-1.amazonaws.com/crypto-exchange/coins-sm/lisk_v2.png" }, { "asset_id": "3e92f1b6-693c-4654-9b9b-938582d64e4f", "name": "Waves", "symbol": "waves", "image_sm_url": "https://s3.ap-south-1.amazonaws.com/crypto-exchange/coins-sm/waves.png" }, { "asset_id": "2794e4c6-6bec-45da-b4a6-74996cdad79a", "name": "Golem", "symbol": "gnt", "image_sm_url": "https://s3.ap-south-1.amazonaws.com/crypto-exchange/coins-sm/golem.png" }, { "asset_id": "86a3f3fa-d616-4f40-b46c-09c49c0187e1", "name": "OmiseGO", "symbol": "omg", "image_sm_url": "https://s3.ap-south-1.amazonaws.com/crypto-exchange/coins-sm/omisego.png" }, { "asset_id": "8960c3e7-c953-4db1-8497-34b82d9ce322", "name": "Augur", "symbol": "rep", "image_sm_url": "https://s3.ap-south-1.amazonaws.com/crypto-exchange/coins-sm/augur.png" }]
  currentInput = {
      payIDName: 'amitasaurus.exodus.id', //
      availableCurrencies: ['BTC', 'ETH', 'TRX', 'EOS', 'LTC'],
      publicAddressCurrencies: ['BTC', 'EOS', 'LTC'],
      assetList: allCurrencies
  }
  appCtrl.renderApp(currentInput);*/

  /**** End of FIXME ****/

  /*window.addEventListener('message', function (event) {
      currentInput = JSON.parse(event.data);
      appCtrl.isExistingAccount = currentInput.payIDName ? true : false;
      if(currentInput.type == 'register'){
          if(currentInput.encryptionKey){
              window.encryptionKey = currentInput.encryptionKey;
          }
      }
      appCtrl.renderApp(currentInput);
  }, false);*/


  function datalookup() {
    if (window.walletInfo) {
      currentInput = window.walletInfo;
      appCtrl.isExistingAccount = currentInput.payIDName ? true : false;
      appCtrl.renderApp(currentInput);
    } else {
      setTimeout(function () {
        datalookup();
      }, 500);
    }
  }

  datalookup(); // window.addEventListener('register', function(event){
  //     currentInput = JSON.parse(event.data);
  // }, false);
});